mod bn254;
mod vec;
use dep::std;


#[test]
fn test_enc_dec_4() {
    let should_plains = [0, 1, 2, 3];
    let should_ciphers = [2703356356541340752984990109685264695808516728203543693539324042622180265433, 4113245929378279374477161311229832574582778253939839906355703407396934869188, 9281696979452556327449638543626490686747154287410108191961876576389984521668, 16854196347310544194108449895250491102266239759150380824789163101915434090226];
    let key = [4329, 1511, 2123, 654];
    let iv = [4,8,6,7];
    let is_ciphers = bn254::enc::encrypt(should_plains, key, iv);
    let is_plains = bn254::dec::decrypt(is_ciphers, key, iv);
    assert(is_plains == should_plains);
    assert(is_ciphers == should_ciphers);
}

#[test]
fn test_enc_dec_8() {
    let should_plains = [0, 1, 2, 3, 4, 5, 6, 7];
    let should_ciphers = [6253404497107438244687797384840461257664016190566464835527438927370668624411, 1800973138098187198027429524899827497123748505248250678562105556859983205515, 5618129703220857246485436738408881707509477921985486776927271602642542365944, 15359941080848256822244342301105361855227277897531933656802385600721295918482, 15072461125568723181855582815441217581297331755899954018042695964537949095606, 2567556554504068829840995984803950833822602267539591634267602928279271532516, 21681347128436503339984206557556390047134071649795038338331678870102676903020, 20044813117944629845761338046067216636616036551310641020298473751727454851222];
    let key = [1456, 1511, 2123, 654];
    let iv = [4,5,6,7];
    let is_ciphers = bn254::enc::encrypt(should_plains, key, iv);
    let is_plains = bn254::dec::decrypt(is_ciphers, key, iv);
    assert(is_plains == should_plains);
    assert(is_ciphers == should_ciphers);
}
/*
#[test]
fn test_enc_dec_12() {

    // Uncomment to make test fail
    // main(1, 1);
    let should_plains = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    let should_ciphers = [2703356356541340752984990109685264695808516728203543693539324042622180265433, 4113245929378279374477161311229832574582778253939839906355703407396934869188, 9281696979452556327449638543626490686747154287410108191961876576389984521668, 16854196347310544194108449895250491102266239759150380824789163101915434090226, 7634161421112678669446145154680761730403486596317182373333700488005244678860, 4618234768197883541014866065365131561986844658330277483045890765954770604783, 1519609344417148612991081109931873787188819259330727661941581841615513463116, 4958180273611120071821492345295168897752063537128260645045130392074603602834, 8393562442027451054082186924879430081376101958850801899651262299995933079905, 7034770665695072103001023110387308356899000888609175775692936575938384794134, 1517036988119386028583582243009548703139580756607560908234338862628793254604, 5948915072376623260440544157497930237807461790180732696257881401883823342537];
    let key = [1456, 13, 2123, 654];
    let iv = [7,8,6,7];
    let is_ciphers = bn254::enc::encrypt(should_plains, key, iv);
    let is_plains = bn254::dec::decrypt(is_ciphers, key, iv);
    assert(is_plains == should_plains);
    assert(is_ciphers == should_ciphers);
}
*/