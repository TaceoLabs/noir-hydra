mod bn254;

#[test]
fn test_enc_dec_4_body_ks() {
    let should_ks = [8551413525028048679171508710813453854400793133773299379819114063353076479498,
        15971893190101592150039054104704174240927982986382956104408062182770449758801,
        12423376073856225830568470066746123080613004582842473002932798474665450798328,
        3957855428994796761355859699481530782199742453458560775464368735641008937138];
    let key = [4329, 1511, 2123, 654];
    let iv = [4, 8, 6, 7];
    let is_ks = bn254::ks::hydra_body_ks(key, iv);
    assert(should_ks == is_ks);
}

#[test]
fn test_enc_dec_4() {
    let should_plains = [0, 1, 2, 3];
    let should_ciphers = [19447436944322747978829343059044143977942642103813222301281339227486616842103,
        14936674166569014268620051459429256192096580363211758696721961772676936099593,
        17049022834570209162700177125421320764293670081797914636231237093738000381021,
        2613102701597254814565298372961618753226046911412857838578604887636013312473];
    let key = [4329, 1511, 2123, 654];
    let iv = [4, 8, 6, 7];
    let is_ciphers = bn254::enc::encrypt(should_plains, key, iv);
    let is_plains = bn254::dec::decrypt(is_ciphers, key, iv);
    assert(is_plains == should_plains);
    assert(is_ciphers == should_ciphers);
}

#[test]
fn test_enc_dec_8() {
    let should_plains = [0, 1, 2, 3, 4, 5, 6, 7];
    let should_ciphers = [19447436944322747978829343059044143977942642103813222301281339227486616842103,
        14936674166569014268620051459429256192096580363211758696721961772676936099593,
        17049022834570209162700177125421320764293670081797914636231237093738000381021,
        2613102701597254814565298372961618753226046911412857838578604887636013312473,
        3155310221479475084119238424383766118955684136656691974926990104727835915379,
        15440453756181019088248723206160581662035831469770347621346670345887983894752,
        7737696570450897186530809214555911654288289807657889147009803610924197232456,
        8143432847676973855449585321332302829717849506101638704132872444529820228574];
    let key = [4329, 1511, 2123, 654];
    let iv = [4, 8, 6, 7];
    let is_ciphers = bn254::enc::encrypt(should_plains, key, iv);
    let is_plains = bn254::dec::decrypt(is_ciphers, key, iv);
    assert(is_plains == should_plains);
    assert(is_ciphers == should_ciphers);
}

#[test]
fn test_enc_dec_12() {
    let should_plains = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    let should_ciphers = [19447436944322747978829343059044143977942642103813222301281339227486616842103,
        14936674166569014268620051459429256192096580363211758696721961772676936099593,
        17049022834570209162700177125421320764293670081797914636231237093738000381021,
        2613102701597254814565298372961618753226046911412857838578604887636013312473,
        3155310221479475084119238424383766118955684136656691974926990104727835915379,
        15440453756181019088248723206160581662035831469770347621346670345887983894752,
        7737696570450897186530809214555911654288289807657889147009803610924197232456,
        8143432847676973855449585321332302829717849506101638704132872444529820228574,
        19170059069179561742285797772414322412068955633219249152440776585685227899590,
        13789331335941092174228537258812715548103248376004866134823686680339170553113,
        1134680848531736460719945002162107440423501814816737721131116404669336913088,
        1010823147423916121165766474246842285520437974134335624557672775477345121650];
    let key = [4329, 1511, 2123, 654];
    let iv = [4, 8, 6, 7];
    let is_ciphers = bn254::enc::encrypt(should_plains, key, iv);
    let is_plains = bn254::dec::decrypt(is_ciphers, key, iv);
    assert(is_plains == should_plains);
    assert(is_ciphers == should_ciphers);
}
